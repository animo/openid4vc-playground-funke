diff --git a/build/openid4vc-verifier/OpenId4VcSiopVerifierService.js b/build/openid4vc-verifier/OpenId4VcSiopVerifierService.js
index d6fd170fd937b0d8df047e6fb9b74636d6ee84ab..5cd025a34d71622bb6a934f99457df9ab9fe4da0 100644
--- a/build/openid4vc-verifier/OpenId4VcSiopVerifierService.js
+++ b/build/openid4vc-verifier/OpenId4VcSiopVerifierService.js
@@ -87,6 +87,7 @@ let OpenId4VcSiopVerifierService = class OpenId4VcSiopVerifierService {
             state,
             requestByReferenceURI: hostedAuthorizationRequestUri,
             jwtIssuer,
+            additionalPayloadClaims: options.additionalPayloadClaims
         });
         // NOTE: it's not possible to set the uri scheme when using the RP to create an auth request, only lower level
         // functions allow this. So we need to replace the uri scheme manually.
@@ -144,6 +145,7 @@ let OpenId4VcSiopVerifierService = class OpenId4VcSiopVerifierService {
                 presentationVerificationCallback: this.getPresentationVerificationCallback(agentContext, {
                     nonce: requestNonce,
                     audience: requestClientId,
+                    verifyHs256Callback: options.verifyHs256Callback
                 }),
             },
         });
@@ -335,6 +337,7 @@ let OpenId4VcSiopVerifierService = class OpenId4VcSiopVerifierService {
                         keyBinding: {
                             audience: options.audience,
                             nonce: options.nonce,
+                            verifyHs256Callback: options.verifyHs256Callback
                         },
                     });
                     isValid = verificationResult.verification.isValid;
diff --git a/build/openid4vc-verifier/OpenId4VcSiopVerifierServiceOptions.d.ts b/build/openid4vc-verifier/OpenId4VcSiopVerifierServiceOptions.d.ts
index 5abfb1bc5710849f656085593c77f3ab3898e4b7..c514681426c8f63b2a076070287ea54bc919fad7 100644
--- a/build/openid4vc-verifier/OpenId4VcSiopVerifierServiceOptions.d.ts
+++ b/build/openid4vc-verifier/OpenId4VcSiopVerifierServiceOptions.d.ts
@@ -18,12 +18,15 @@ export interface OpenId4VcSiopCreateAuthorizationRequestOptions {
     presentationExchange?: {
         definition: DifPresentationExchangeDefinitionV2;
     };
+
+    additionalPayloadClaims?: Record<string, unknown>
 }
 export interface OpenId4VcSiopVerifyAuthorizationResponseOptions {
     /**
      * The authorization response received from the OpenID Provider (OP).
      */
     authorizationResponse: OpenId4VcSiopAuthorizationResponsePayload;
+    verifyHs256Callback?: (key: Key, data: Uint8Array, signatureBase64Url: string) => Promise<boolean>
 }
 export interface OpenId4VcSiopCreateAuthorizationRequestReturn {
     authorizationRequest: string;
diff --git a/build/openid4vc-verifier/router/authorizationEndpoint.d.ts b/build/openid4vc-verifier/router/authorizationEndpoint.d.ts
index baffab5ef01cffde68fefefdd89f561f75b59032..c57f258de062a64cf5252f458bd5e6b279e42a79 100644
--- a/build/openid4vc-verifier/router/authorizationEndpoint.d.ts
+++ b/build/openid4vc-verifier/router/authorizationEndpoint.d.ts
@@ -7,5 +7,6 @@ export interface OpenId4VcSiopAuthorizationEndpointConfig {
      * @default /authorize
      */
     endpointPath: string;
+    verifyHs256Callback: (agentContext: AgentContext, rpEphPub: Record<string, unknown>) => (key: Key, data: Uint8Array, signatureBase64Url: string) => Promise<boolean>
 }
 export declare function configureAuthorizationEndpoint(router: Router, config: OpenId4VcSiopAuthorizationEndpointConfig): void;
diff --git a/build/openid4vc-verifier/router/authorizationEndpoint.js b/build/openid4vc-verifier/router/authorizationEndpoint.js
index a523a1e668863929f49b50fea6786e42955e5149..cc156969b3ca6b7e853a62a9a6f4f5ebfb182c03 100644
--- a/build/openid4vc-verifier/router/authorizationEndpoint.js
+++ b/build/openid4vc-verifier/router/authorizationEndpoint.js
@@ -3,6 +3,8 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.configureAuthorizationEndpoint = configureAuthorizationEndpoint;
 const router_1 = require("../../shared/router");
 const OpenId4VcSiopVerifierService_1 = require("../OpenId4VcSiopVerifierService");
+const core_1 = require("@credo-ts/core");
+
 function configureAuthorizationEndpoint(router, config) {
     router.post(config.endpointPath, async (request, response, next) => {
         const { agentContext, verifier } = (0, router_1.getRequestContext)(request);
@@ -16,6 +18,13 @@ function configureAuthorizationEndpoint(router, config) {
                 authorizationResponse,
                 verifierId: verifier.verifierId,
             });
+            let verifyHs256Callback = undefined
+            const parsedAuthorizationRequest = core_1.Jwt.fromSerializedJwt(verificationSession.authorizationRequestJwt)
+            const rpEphPub = parsedAuthorizationRequest.payload.additionalClaims.rp_eph_pub
+            if(rpEphPub !== null && rpEphPub !== void 0) {
+              verifyHs256Callback = config.verifyHs256Callback(agentContext, rpEphPub.jwk)
+            }
+            
             if (!verificationSession) {
                 agentContext.config.logger.warn(`No verification session found for incoming authorization response for verifier ${verifier.verifierId}`);
                 return (0, router_1.sendErrorResponse)(response, agentContext.config.logger, 404, 'invalid_request', null);
@@ -23,6 +32,7 @@ function configureAuthorizationEndpoint(router, config) {
             await openId4VcVerifierService.verifyAuthorizationResponse(agentContext, {
                 authorizationResponse: request.body,
                 verificationSession,
+                verifyHs256Callback: verifyHs256Callback
             });
             response.status(200).send();
         }
diff --git a/build/shared/utils.js b/build/shared/utils.js
index 36037ab98cf59f64b56d107aef9b2eb02b491c60..7eccc2ab99d396366299138df8d99376ca35696c 100644
--- a/build/shared/utils.js
+++ b/build/shared/utils.js
@@ -64,9 +64,10 @@ function getCreateJwtCallback(agentContext) {
             return jws;
         }
         else if (jwtIssuer.method === 'jwk') {
-            const key = (0, core_1.getJwkFromJson)(jwtIssuer.jwk).key;
+            const jwk = core_1.getJwkFromJson(jwtIssuer.jwk);
+            const key = jwk.key;
             const jws = await jwsService.createJwsCompact(agentContext, {
-                protectedHeaderOptions: jwt.header,
+                protectedHeaderOptions: Object.assign(jwt.header, { jwk, alg: jwtIssuer.alg }),
                 payload: core_1.JwtPayload.fromJson(jwt.payload),
                 key,
             });
@@ -75,7 +76,7 @@ function getCreateJwtCallback(agentContext) {
         else if (jwtIssuer.method === 'x5c') {
             const key = core_1.X509Service.getLeafCertificate(agentContext, { certificateChain: jwtIssuer.x5c }).publicKey;
             const jws = await jwsService.createJwsCompact(agentContext, {
-                protectedHeaderOptions: jwt.header,
+                protectedHeaderOptions: Object.assign(jwt.header, { jwk: undefined, alg: jwtIssuer.alg }),
                 payload: core_1.JwtPayload.fromJson(jwt.payload),
                 key,
             });
@@ -102,17 +103,19 @@ async function openIdTokenIssuerToJwtIssuer(agentContext, openId4VcTokenIssuer)
         const leafCertificate = core_1.X509Service.getLeafCertificate(agentContext, {
             certificateChain: openId4VcTokenIssuer.x5c,
         });
+        const jwk = (0, core_1.getJwkFromKey)(leafCertificate.publicKey);
+        const alg = jwk.supportedSignatureAlgorithms[0]
         if (!issuer.startsWith('https://')) {
             throw new core_1.CredoError('The X509 certificate issuer must be a HTTPS URI.');
         }
         if ((_b = leafCertificate.sanUriNames) === null || _b === void 0 ? void 0 : _b.includes(issuer)) {
-            return Object.assign(Object.assign({}, openId4VcTokenIssuer), { clientIdScheme: 'x509_san_uri' });
+            return Object.assign(Object.assign({}, openId4VcTokenIssuer), { clientIdScheme: 'x509_san_uri', alg });
         }
         else {
             if (!((_c = leafCertificate.sanDnsNames) === null || _c === void 0 ? void 0 : _c.includes((0, core_1.getDomainFromUrl)(issuer)))) {
                 throw new Error(`The 'iss' claim in the payload does not match a 'SAN-URI' or 'SAN-DNS' name in the x5c certificate.`);
             }
-            return Object.assign(Object.assign({}, openId4VcTokenIssuer), { clientIdScheme: 'x509_san_dns' });
+            return Object.assign(Object.assign({}, openId4VcTokenIssuer), { clientIdScheme: 'x509_san_dns', alg });
         }
     }
     return openId4VcTokenIssuer;
