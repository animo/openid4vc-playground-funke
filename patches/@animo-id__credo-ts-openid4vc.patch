diff --git a/build/openid4vc-verifier/OpenId4VpVerifierService.js b/build/openid4vc-verifier/OpenId4VpVerifierService.js
index fa3f91e3ee5b903dfd9d72228f071765964c166f..a70962fdf3e36d1c7f6e168c1e9f6b89e73d6fc7 100644
--- a/build/openid4vc-verifier/OpenId4VpVerifierService.js
+++ b/build/openid4vc-verifier/OpenId4VpVerifierService.js
@@ -67,14 +67,15 @@ let OpenId4VpVerifierService = class OpenId4VpVerifierService {
             throw new core_2.CredoError("Unable to create authorization request with response mode 'direct_post' containing mDOC credentials. ISO 18013-7 requires the usage of response mode 'direct_post.jwt', and needs parameters from the encrypted response header to verify the mDOC sigature.");
         }
         if (options.verifierAttestations) {
-            const hasValidCredentialIdsForDcql = options?.dcql?.query.credentials.every(({ id }) => options.verifierAttestations?.every((va) => va.credential_ids?.includes(id))) ?? true;
-            if (!hasValidCredentialIdsForDcql) {
-                throw new core_2.CredoError('Dcql is used as query language and verifier attestations were provided, but the dcql query used credential ids that are not supported by the verifier attestations');
-            }
-            const hasValidCredentialIdsForPex = options?.presentationExchange?.definition.input_descriptors.every(({ id }) => options.verifierAttestations?.every((va) => va.credential_ids?.includes(id)));
-            if (!hasValidCredentialIdsForPex) {
-                throw new core_2.CredoError('Presentation Exchange is used as query language and verifier attestations were provided, but the presentation exchange query used credential ids that are not supported by the verifier attestations');
-            }
+            // Bug in this code, fixed in PR to update to OpenID4VP 1.0
+            // const hasValidCredentialIdsForDcql = options?.dcql?.query.credentials.every(({ id }) => options.verifierAttestations?.every((va) => va.credential_ids?.includes(id))) ?? true;
+            // if (!hasValidCredentialIdsForDcql) {
+            //     throw new core_2.CredoError('Dcql is used as query language and verifier attestations were provided, but the dcql query used credential ids that are not supported by the verifier attestations');
+            // }
+            // const hasValidCredentialIdsForPex = options?.presentationExchange?.definition.input_descriptors.every(({ id }) => options.verifierAttestations?.every((va) => va.credential_ids?.includes(id)));
+            // if (!hasValidCredentialIdsForPex) {
+            //     throw new core_2.CredoError('Presentation Exchange is used as query language and verifier attestations were provided, but the presentation exchange query used credential ids that are not supported by the verifier attestations');
+            // }
         }
         const authorizationRequestId = core_2.utils.uuid();
         // We include the `session=` in the url so we can still easily
