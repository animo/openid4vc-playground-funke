diff --git a/dist/request-object/Payload.js b/dist/request-object/Payload.js
index f270cc5dd7ca4da9f93a16a400297ec8be9da936..d15b1ff70a68fdcd566707032e08e200cad3bb0f 100644
--- a/dist/request-object/Payload.js
+++ b/dist/request-object/Payload.js
@@ -35,12 +35,17 @@ const createRequestObjectPayload = (opts) => __awaiter(void 0, void 0, void 0, f
     const nbf = (_e = payload.nbf) !== null && _e !== void 0 ? _e : iat;
     const exp = (_f = payload.exp) !== null && _f !== void 0 ? _f : iat + validInSec;
     const jti = (_g = payload.jti) !== null && _g !== void 0 ? _g : (0, uuid_1.v4)();
-    return (0, helpers_1.removeNullUndefined)(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ response_type: (_h = payload.response_type) !== null && _h !== void 0 ? _h : types_1.ResponseType.ID_TOKEN, scope: (_j = payload.scope) !== null && _j !== void 0 ? _j : types_1.Scope.OPENID, 
+    const obj = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ response_type: (_h = payload.response_type) !== null && _h !== void 0 ? _h : types_1.ResponseType.ID_TOKEN, scope: (_j = payload.scope) !== null && _j !== void 0 ? _j : types_1.Scope.OPENID, 
         //TODO implement /.well-known/openid-federation support in the OP side to resolve the client_id (URL) and retrieve the metadata
         client_id: clientId, client_id_scheme: opts.requestObject.payload.client_id_scheme }, (payload.redirect_uri && { redirect_uri: payload.redirect_uri })), (payload.response_uri && { response_uri: payload.response_uri })), { response_mode: (_k = payload.response_mode) !== null && _k !== void 0 ? _k : types_1.ResponseMode.DIRECT_POST }), (payload.id_token_hint && { id_token_hint: payload.id_token_hint })), { registration_uri: registration.clientMetadataOpts.reference_uri, nonce: (0, helpers_1.getNonce)(state, payload.nonce), state }), registration.payload), { claims, presentation_definition_uri: payload.presentation_definition_uri, presentation_definition: payload.presentation_definition, iat,
         nbf,
         exp,
-        jti }));
+        jti })
+
+    if(opts.additionalPayloadClaims !== null && opts.additionalPayloadClaims !== void 0) {
+      Object.assign(obj, opts.additionalPayloadClaims)
+    }
+    return (0, helpers_1.removeNullUndefined)(obj);
 });
 exports.createRequestObjectPayload = createRequestObjectPayload;
 const assertValidRequestObjectPayload = (verPayload) => {
diff --git a/dist/request-object/RequestObject.js b/dist/request-object/RequestObject.js
index dc3a12be88d9ecf399433b42cbc93b46bccfef0d..afb5ac1b1670566c55617deb3e811f0675a7d5ef 100644
--- a/dist/request-object/RequestObject.js
+++ b/dist/request-object/RequestObject.js
@@ -92,7 +92,6 @@ class RequestObject {
                 else if (jwtIssuer.method === 'x5c') {
                     this.payload.iss = jwtIssuer.issuer;
                     this.payload.client_id = jwtIssuer.issuer;
-                    this.payload.redirect_uri = jwtIssuer.issuer;
                     this.payload.client_id_scheme = jwtIssuer.clientIdScheme;
                     const header = { x5c: jwtIssuer.x5c, typ: 'JWT' };
                     this.jwt = yield this.opts.createJwtCallback(jwtIssuer, { header, payload: this.payload });
diff --git a/dist/rp/RP.js b/dist/rp/RP.js
index 92b27cbb69e2a6d44a7cf08b6f63326424fad1ce..06469a6f216c07f50649b98c63576fdf2c5448e7 100644
--- a/dist/rp/RP.js
+++ b/dist/rp/RP.js
@@ -218,6 +218,9 @@ class RP {
                 newOpts.requestObject.payload.claims = Object.assign(Object.assign({}, newOpts.requestObject.payload.claims), claimsWithTarget.propertyValue);
             }
         }
+        if(opts.additionalPayloadClaims !== null && opts.additionalPayloadClaims !== void 0) {
+          newOpts.additionalPayloadClaims = opts.additionalPayloadClaims
+        }
         return newOpts;
     }
     newVerifyAuthorizationResponseOpts(authorizationResponse, opts) {
diff --git a/dist/types/JwtVerifier.js b/dist/types/JwtVerifier.js
index 90ecefe0c7b0859b05af643e5d7d88b271821e03..78eb1a0f24e79bead215b0ce507c17d230792791 100644
--- a/dist/types/JwtVerifier.js
+++ b/dist/types/JwtVerifier.js
@@ -57,7 +57,7 @@ const getJwkVerifier = (jwt, options) => __awaiter(void 0, void 0, void 0, funct
     if (selfComputedJwkThumbPrintUri !== jwkThumbPrintUri) {
         throw new Error(`${Errors_1.default.INVALID_JWT} '${type}' contains an invalid sub_jwk claim.`);
     }
-    return { method: 'jwk', type, jwk: jwt.header.jwk, jwkThumbprint: jwt.payload.sub_jwk };
+    return { method: 'jwk', type, jwk: jwt.header.jwk, jwkThumbprint: jwt.payload.sub_jwk, alg: jwt.header.alg };
 });
 exports.getJwkVerifier = getJwkVerifier;
 const getJwtVerifierWithContext = (jwt, options) => __awaiter(void 0, void 0, void 0, function* () {
